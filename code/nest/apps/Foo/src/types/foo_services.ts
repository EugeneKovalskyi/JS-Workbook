// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: foo_services.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Foo, GetFooDTO, PostFooDTO, Time } from "./foo_messages";

export interface FooServiceClient {
  postFoo(request: PostFooDTO): Observable<Foo>;

  getFoo(request: GetFooDTO): Observable<Foo>;

  getTime(request: Observable<Time>): Observable<Time>;
}

export interface FooServiceController {
  postFoo(request: PostFooDTO): Promise<Foo> | Observable<Foo> | Foo;

  getFoo(request: GetFooDTO): Promise<Foo> | Observable<Foo> | Foo;

  getTime(request: Observable<Time>): Observable<Time>;
}

export function FooServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["postFoo", "getFoo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FooService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["getTime"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FooService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FOO_SERVICE_NAME = "FooService";
