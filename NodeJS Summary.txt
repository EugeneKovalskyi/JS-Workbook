\\\\\\\\\\\\
1. Основы
\\\\\\\\\\\\

>> Команды npm:
    > npm -h (--help)               // вызов справки
    > npm i  (install)              // устанавливает зависимости для проекта
    > npm i -D (install --save-dev) // устанавливает зависимости для разработки
    > npm t  (test)                 // запуск тестирование
    > npm -g (--global)             // флаг глобальной установки
    > npm init -y (--yes)           // принятие установок инициализации
    > npm init -f (--force)         // принятие установок инициализации
    > npm -O (--save-optional)      // сохранение пакета в виде опциональной зависимости
    > npm -E (--save-exact)         // сохранение сведений о точной версии пакета
    > npm -B (--save-bundle)        // записывает в package.json в bundleDependencies список установленных пакетов
    > npm pack                      // создает tarball-файл, содержащий файлы проекта и пакеты из bundleDependencies

>> Node.js - среда выполнения кода JavaScript:
    - на основе JS Chrome V8
    - позволяет выполнять JS вне веб-браузера
    - предназначен для создания серверных приложений
    - хорошо подходит для обработки потоковых данных в реальном времени
    - НЕ подходит для решения задач, требующих много ресурсов

>> Особенности Node.js:
    1. global
    2. Нет взаимодействия с DOM
    3. Есть доступ к файловой системе клиента       

>> Node REPL - интерактивный интерпретатор (Read-Evaluate-Print-Loop)

>> Встроенные модули Node.js:
    - path
    - http
    - js (можно работать через Promise)
    - os
    - crypto
    
>> runtime - означает запущенный процесс в ОЗУ, который откликается на команды

>> LibUV - библиотека на C++, которая обеспечивает поддержку неблокирующих операций ввода-вывода
>> C++ Bindings - термин выделяющий группу библиотек (посредники), которые позволяют использовать в Node.js функционал библиотеки LibUV
>> Thread Scheduler (Планировщик потоков) - часть ОС, которая отвечает за паралельное выполнение задач

>> worker_threads - модуль в Node.js позволяющий управлять потоками из кода

>> Демультиплексор событий - собирает и ставит в очередь события I/O

>> Принцип работы шаблона REACTOR:
    Приложение[I/O <--> Обработка] --> Демультиплексор событий --> Очередь событий --> Event Loop <--> Приложение

>> Processes and threads (процессы и потоки):
    1. Node.js имеет  1 поток, который обрабатывает все запросы
    2. LibUV обеспечивает поддержку многопоточных операций (ассинхронные неблокирующие операции)

>> LibUV: 1. Event loop - асинхронно обрабатывает событийные операции (вызываются фу-и подписанные на события)
          2. Thread pool - асинхронно обрабатывает операции из основного потока кода:
              - по умолчанию 4 threads
              - максимум 1024 threads

>> Этапы выполнения событий в Event loop:
    1. process.nextTick ( метод, который вызывает любой callback немедленно, независимо от этапа event loop )
    2. Promise
    3. Timers ( setTimeout, setInterval )
    4. Pending ( Input/Output callbacks отложенные до след. итерации event loop)
    5. Idle, Prepare ( внутренние служебные задачи Node.js )
    6. Poll ( event loop получает и выполняет задачи Input/Output )
    7. Check ( setImmediate )
    8. Close ( close event callbacks )
    9. Продолжать ли event loop? ( если нет, то выход из цикла )

>> Этапы выполнения событий в Event loop (Упрощенная схема):
    1. process.nextTick <---┐
    2. Promise              |
    3. Timers               |
    4. I/O Events           |  
    5. Check                |
    6. Close ---------------┴---> Выход из Event loop  
    
>> Способы экспорта сущностей:
    1. module.exports.foo = foo
    2. module.exports.foo = function () {}
    3. module.exports = function () {}      // экспорт по умолчанию

>> Внутреннее устройство модуля в Node.js (common.js):
    (function (exports, require, module, __filename, __dirname) {
        console.log(arguments.callee.toString())
    })

>> Streams (потоки):
    - Readable
    - Writable
    - Duplex (Readable + Writable)
    - Transform (как Duplex, но может изменять данные по мере чтения)